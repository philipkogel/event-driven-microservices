version: '3.9'

services:
  backend-email:
    build:
      context: ./apps/email
      args:
        - DEV=true
    ports:
      - 8000:8000
    volumes:
      - ./apps/email:/apps/email
    depends_on:
      - kafka

  backend-ambassador:
    build:
      context: ./apps/ambassador
      args:
        - DEV=true
    ports:
      - 8001:8001
    volumes:
      - ./apps/ambassador:/apps/ambassador
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8001"
    environment:
      - DB_HOST=db-ambassador
      - DB_NAME=dbambassador
      - DB_USER=devuser
      - DB_PASS=changeme
      - DEBUG=1
    depends_on:
      - db-ambassador
    networks:
      - common

  backend-admin:
    build:
      context: ./apps/admin
      args:
        - DEV=true
    ports:
      - 8004:8004
    volumes:
      - ./apps/admin:/apps/admin
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8004"
    environment:
      - DB_HOST=db-admin
      - DB_NAME=dbadmin
      - DB_USER=devuser
      - DB_PASS=changeme
      - DEBUG=1
    depends_on:
      - db-admin
    networks:
      - common

  backend-checkout:
    build:
      context: ./apps/checkout
      args:
        - DEV=true
    ports:
      - 8002:8002
    volumes:
      - ./apps/checkout:/apps/checkout
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8002"
    environment:
      - DB_HOST=db-checkout
      - DB_NAME=dbcheckout
      - DB_USER=devuser
      - DB_PASS=changeme
      - DEBUG=1
    depends_on:
      - db-checkout

  backend-users:
    build:
      context: ./apps/users
      args:
        - DEV=true
    container_name: users-ms
    ports:
      - 8003:8003
    volumes:
      - ./apps/users:/apps/users
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8003"
    environment:
      - DB_HOST=db-users
      - DB_NAME=dbusers
      - DB_USER=devuser
      - DB_PASS=changeme
      - DEBUG=1
    depends_on:
      - db-users
    networks:
      - users

  db-checkout:
    image: postgres:13-alpine
    volumes:
      - dev-db-checkout-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=dbcheckout
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme
    ports:
      - 5432:5432

  db-users:
    image: postgres:13-alpine
    volumes:
      - dev-db-users-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=dbusers
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme
    ports:
      - 5433:5432
    networks:
      - users

  db-ambassador:
    image: postgres:13-alpine
    volumes:
      - dev-db-ambassador-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=dbambassador
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme
    ports:
      - 5434:5432
    networks:
      - common

  db-admin:
    image: postgres:13-alpine
    volumes:
      - dev-db-admin-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=dbadmin
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme
    ports:
      - 5435:5432
    networks:
      - common

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    depends_on:
      - kafka

volumes:
  dev-db-checkout-data:
  dev-db-users-data:
  dev-db-ambassador-data:
  dev-db-admin-data:

networks:
  common:
      name: users
  users:
    name: users
